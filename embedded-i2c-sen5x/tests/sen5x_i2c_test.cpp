/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.3.0
 * Yaml Version: 2.1.3
 * Template Version: 0.7.0-109-gb259776
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sen5x_i2c.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include <inttypes.h>
#include <math.h>
#include <stdio.h>

#define MEASUREMENT_INTERVAL_USEC 1000000

TEST_GROUP (SEN5X_Tests) {
    void setup() {
        sensirion_i2c_hal_init();

        int16_t error = sensirion_i2c_mux_set_single_channel(0x72, 4);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
    }

    void teardown() {

        int16_t error;
        error = sen5x_device_reset();
        CHECK_EQUAL_ZERO_TEXT(error, "sen5x_device_reset");

        sensirion_i2c_hal_free();
    }
};

TEST (SEN5X_Tests, SEN5X_Test_start_measurement) {
    int16_t error;
    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_start_measurement");
}

TEST (SEN5X_Tests, SEN5X_Test_start_measurement_without_pm) {
    int16_t error;
    error = sen5x_start_measurement_without_pm();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_start_measurement_without_pm");
}

TEST (SEN5X_Tests, SEN5X_Test_stop_measurement) {
    int16_t error;
    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_start_measurement");
    error = sen5x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_stop_measurement");
}

TEST (SEN5X_Tests, SEN5X_Test_read_data_ready) {
    int16_t error;
    bool data_ready;
    error = sen5x_read_data_ready(&data_ready);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_data_ready");
    printf("Data ready after startup: %i\n", data_ready);
    CHECK_FALSE_TEXT(data_ready,
                     "data ready expected to be false after startup");
    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(
        error, "sen5x_start_measurement in SEN5X_Test_read_data_ready");
    sensirion_i2c_hal_sleep_usec(MEASUREMENT_INTERVAL_USEC);
    error = sen5x_read_data_ready(&data_ready);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_data_ready");
    printf("Data ready after start_measurement: %i\n", data_ready);
    CHECK_TRUE_TEXT(data_ready,
                    "data ready expected to be true after start measurement");
}

TEST (SEN5X_Tests, SEN5X_Test_read_measured_values) {
    int16_t error;
    uint16_t mass_concentration_pm1p0;
    uint16_t mass_concentration_pm2p5;
    uint16_t mass_concentration_pm4p0;
    uint16_t mass_concentration_pm10p0;
    int16_t ambient_humidity;
    int16_t ambient_temperature;
    int16_t voc_index;
    int16_t nox_index;

    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(
        error, "sen5x_start_measurement in SEN5X_Test_read_measured_values");
    sensirion_i2c_hal_sleep_usec(MEASUREMENT_INTERVAL_USEC);

    error = sen5x_read_measured_values(
        &mass_concentration_pm1p0, &mass_concentration_pm2p5,
        &mass_concentration_pm4p0, &mass_concentration_pm10p0,
        &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_measured_values");
    printf("Mass concentration pm1p0: %u\n", mass_concentration_pm1p0);
    printf("Mass concentration pm2p5: %u\n", mass_concentration_pm2p5);
    printf("Mass concentration pm4p0: %u\n", mass_concentration_pm4p0);
    printf("Mass concentration pm10p0: %u\n", mass_concentration_pm10p0);
    printf("Ambient humidity: %i\n", ambient_humidity);
    printf("Ambient temperature: %i\n", ambient_temperature);
    printf("Voc index: %i\n", voc_index);
    printf("Nox index: %i\n", nox_index);
    CHECK_TRUE_TEXT(mass_concentration_pm1p0 != UINT16_MAX,
                    "mass concentration pm1p0 seems to be invalid")
}

TEST (SEN5X_Tests, SEN5X_Test_read_measured_raw_values) {
    int16_t error;
    int16_t raw_humidity = INT16_MAX;
    int16_t raw_temperature = INT16_MAX;
    uint16_t raw_voc;
    uint16_t raw_nox;

    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(
        error,
        "sen5x_start_measurement in SEN5X_Test_read_measured_raw_values");
    sensirion_i2c_hal_sleep_usec(MEASUREMENT_INTERVAL_USEC);

    error = sen5x_read_measured_raw_values(&raw_humidity, &raw_temperature,
                                           &raw_voc, &raw_nox);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_measured_raw_values");
    printf("Raw humidity: %i\n", raw_humidity);
    printf("Raw temperature: %i\n", raw_temperature);
    printf("Raw voc: %u\n", raw_voc);
    printf("Raw nox: %u\n", raw_nox);
    CHECK_TRUE_TEXT(raw_humidity != INT16_MAX, "read of humidity did not work")
    CHECK_TRUE_TEXT(raw_temperature != INT16_MAX,
                    "raw temperature seems to be invalid")
}

TEST (SEN5X_Tests, SEN5X_Test_read_measured_pm_values) {
    int16_t error;
    uint16_t mass_concentration_pm1p0;
    uint16_t mass_concentration_pm2p5;
    uint16_t mass_concentration_pm4p0;
    uint16_t mass_concentration_pm10p0;
    uint16_t number_concentration_pm0p5;
    uint16_t number_concentration_pm1p0;
    uint16_t number_concentration_pm2p5;
    uint16_t number_concentration_pm4p0;
    uint16_t number_concentration_pm10p0;
    uint16_t typical_particle_size;

    error = sen5x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(
        error,
        "sen5x_start_measurement in SEN5X_Test_read_measured_raw_values");
    sensirion_i2c_hal_sleep_usec(MEASUREMENT_INTERVAL_USEC);

    error = sen5x_read_measured_pm_values(
        &mass_concentration_pm1p0, &mass_concentration_pm2p5,
        &mass_concentration_pm4p0, &mass_concentration_pm10p0,
        &number_concentration_pm0p5, &number_concentration_pm1p0,
        &number_concentration_pm2p5, &number_concentration_pm4p0,
        &number_concentration_pm10p0, &typical_particle_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_measured_pm_values");
    printf("Mass concentration pm1p0: %u\n", mass_concentration_pm1p0);
    printf("Mass concentration pm2p5: %u\n", mass_concentration_pm2p5);
    printf("Mass concentration pm4p0: %u\n", mass_concentration_pm4p0);
    printf("Mass concentration pm10p0: %u\n", mass_concentration_pm10p0);
    printf("Number concentration pm0p5: %u\n", number_concentration_pm0p5);
    printf("Number concentration pm1p0: %u\n", number_concentration_pm1p0);
    printf("Number concentration pm2p5: %u\n", number_concentration_pm2p5);
    printf("Number concentration pm4p0: %u\n", number_concentration_pm4p0);
    printf("Number concentration pm10p0: %u\n", number_concentration_pm10p0);
    printf("Typical particle size: %u\n", typical_particle_size);
    CHECK_TRUE_TEXT(number_concentration_pm1p0 != UINT16_MAX,
                    "number concentration pm1p0 seems to be invalid")
}

TEST (SEN5X_Tests, SEN5X_Test_start_fan_cleaning) {
    int16_t error;
    error = sen5x_start_fan_cleaning();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_start_fan_cleaning");
}

TEST (SEN5X_Tests, SEN5X_Test_temperature_offset_parameters) {
    int16_t error;
    int16_t temp_offset = 5 * 200;
    int16_t slope = int16_t(0.01 * 10000);
    uint16_t time_constant = 3;
    error = sen5x_set_temperature_offset_parameters(temp_offset, slope,
                                                    time_constant);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_temperature_offset_parameters");
    int16_t temp_offset_read;
    int16_t slope_read;
    uint16_t time_constant_read;
    error = sen5x_get_temperature_offset_parameters(
        &temp_offset_read, &slope_read, &time_constant_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_temperature_offset_parameters");
    CHECK_EQUAL_TEXT(temp_offset, temp_offset_read,
                     "offset read different from value set")
    CHECK_EQUAL_TEXT(slope, slope_read, "slope read different from value set")
    CHECK_EQUAL_TEXT(time_constant, time_constant_read,
                     "time_constant read different from value set")
}

TEST (SEN5X_Tests, SEN5X_Test_set_warm_start_parameter) {
    int16_t error;
    uint16_t warm_start = 3333;
    error = sen5x_set_warm_start_parameter(warm_start);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_warm_start_parameter");
    uint16_t warm_start_read;
    error = sen5x_get_warm_start_parameter(&warm_start_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_warm_start_parameter");
    CHECK_EQUAL_TEXT(warm_start, warm_start_read,
                     "warm start value read different from value set");
}

TEST (SEN5X_Tests, SEN5X_Test_voc_algorithm_tuning_parameters) {
    int16_t error;
    int16_t index_offset = 2;
    int16_t learning_time_offset_hours = 11;
    int16_t learning_time_gain_hours = 10;
    int16_t gating_max_duration_minutes = 710;
    int16_t std_initial = 40;
    int16_t gain_factor = 220;
    error = sen5x_set_voc_algorithm_tuning_parameters(
        index_offset, learning_time_offset_hours, learning_time_gain_hours,
        gating_max_duration_minutes, std_initial, gain_factor);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_voc_algorithm_tuning_parameters");

    int16_t index_offset_read;
    int16_t learning_time_offset_hours_read;
    int16_t learning_time_gain_hours_read;
    int16_t gating_max_duration_minutes_read;
    int16_t std_initial_read;
    int16_t gain_factor_read;
    error = sen5x_get_voc_algorithm_tuning_parameters(
        &index_offset_read, &learning_time_offset_hours_read,
        &learning_time_gain_hours_read, &gating_max_duration_minutes_read,
        &std_initial_read, &gain_factor_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_voc_algorithm_tuning_parameters");
    printf("Index offset: %i\n", index_offset_read);
    printf("Learning time offset hours: %i\n", learning_time_offset_hours_read);
    printf("Learning time gain hours: %i\n", learning_time_gain_hours_read);
    printf("Gating max duration minutes: %i\n",
           gating_max_duration_minutes_read);
    printf("Std initial: %i\n", std_initial_read);
    printf("Gain factor: %i\n", gain_factor_read);
    CHECK_EQUAL_TEXT(index_offset, index_offset_read,
                     "index_offset not matching")
    CHECK_EQUAL_TEXT(learning_time_offset_hours,
                     learning_time_offset_hours_read,
                     "learing_time_offset_hours not matching")
    CHECK_EQUAL_TEXT(learning_time_gain_hours, learning_time_gain_hours_read,
                     "learning_time_gain_hours not matching")
    CHECK_EQUAL_TEXT(gating_max_duration_minutes,
                     gating_max_duration_minutes_read,
                     "gating_max_duration_minutes not matching")
    CHECK_EQUAL_TEXT(std_initial, std_initial_read, "std_initial not matching")
    CHECK_EQUAL_TEXT(gain_factor, gain_factor_read, "gain_factor not matching")
}

TEST (SEN5X_Tests, SEN5X_Test_nox_algorithm_tuning_parameters) {
    int16_t error;
    int16_t index_offset = 110;
    int16_t learning_time_offset_hours = 13;
    int16_t learning_time_gain_hours = 14;
    int16_t gating_max_duration_minutes = 190;
    int16_t std_initial = 60;
    int16_t gain_factor = 240;
    error = sen5x_set_nox_algorithm_tuning_parameters(
        index_offset, learning_time_offset_hours, learning_time_gain_hours,
        gating_max_duration_minutes, std_initial, gain_factor);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_nox_algorithm_tuning_parameters");
    int16_t index_offset_read;
    int16_t learning_time_offset_hours_read;
    int16_t learning_time_gain_hours_read;
    int16_t gating_max_duration_minutes_read;
    int16_t std_initial_read;
    int16_t gain_factor_read;
    error = sen5x_get_nox_algorithm_tuning_parameters(
        &index_offset_read, &learning_time_offset_hours_read,
        &learning_time_gain_hours_read, &gating_max_duration_minutes_read,
        &std_initial_read, &gain_factor_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_nox_algorithm_tuning_parameters");
    printf("Index offset: %i\n", index_offset_read);
    printf("Learning time offset hours: %i\n", learning_time_offset_hours_read);
    printf("Learning time gain hours: %i\n", learning_time_gain_hours_read);
    printf("Gating max duration minutes: %i\n",
           gating_max_duration_minutes_read);
    printf("Std initial: %i\n", std_initial_read);
    printf("Gain factor: %i\n", gain_factor_read);
    CHECK_EQUAL_TEXT(index_offset, index_offset_read,
                     "index_offset not matching")
    CHECK_EQUAL_TEXT(learning_time_offset_hours,
                     learning_time_offset_hours_read,
                     "learing_time_offset_hours not matching")
    CHECK_EQUAL_TEXT(learning_time_gain_hours, learning_time_gain_hours_read,
                     "learning_time_gain_hours not matching")
    CHECK_EQUAL_TEXT(gating_max_duration_minutes,
                     gating_max_duration_minutes_read,
                     "gating_max_duration_minutes not matching")
    CHECK_EQUAL_TEXT(std_initial, std_initial_read, "std_initial not matching")
    CHECK_EQUAL_TEXT(gain_factor, gain_factor_read, "gain_factor not matching")
}

TEST (SEN5X_Tests, SEN5X_Test_rht_acceleration_mode) {
    int16_t error;
    uint16_t mode = 1;
    error = sen5x_set_rht_acceleration_mode(mode);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_rht_acceleration_mode");
    uint16_t mode_read;
    error = sen5x_get_rht_acceleration_mode(&mode_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_rht_acceleration_mode");
    printf("Mode: %u\n", mode_read);
    CHECK_EQUAL_TEXT(mode, mode_read, "mode set and read not matching")
}

TEST (SEN5X_Tests, SEN5X_Test_set_voc_algorithm_state) {
    int16_t error;
    uint8_t state[8];
    uint8_t state_size = 8;
    error = sen5x_set_voc_algorithm_state(&state[0], state_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_voc_algorithm_state");
}

TEST (SEN5X_Tests, SEN5X_Test_get_voc_algorithm_state) {
    int16_t error;
    uint8_t state[8];
    uint8_t state_size = 8;
    error = sen5x_get_voc_algorithm_state(&state[0], state_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_voc_algorithm_state");
    printf("State: ");
    for (size_t i = 0; i < state_size; i++) {
        printf("%u, ", state[i]);
    }
    printf("\n");
}

TEST (SEN5X_Tests, SEN5X_Test_fan_auto_cleaning_interval) {
    int16_t error;
    uint32_t interval = 5;
    error = sen5x_set_fan_auto_cleaning_interval(interval);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_set_fan_auto_cleaning_interval");
    uint32_t interval_read;
    error = sen5x_get_fan_auto_cleaning_interval(&interval_read);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_fan_auto_cleaning_interval");
    printf("Interval: %u\n", interval_read);
    CHECK_EQUAL_TEXT(interval, interval_read,
                     "interval set and read not matching")
}

TEST (SEN5X_Tests, SEN5X_Test_get_product_name) {
    int16_t error;
    unsigned char product_name[42];
    uint8_t product_name_size = 42;
    error = sen5x_get_product_name(&product_name[0], product_name_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_product_name");
    printf("Product name: %s\n", product_name);
}

TEST (SEN5X_Tests, SEN5X_Test_get_serial_number) {
    int16_t error;
    unsigned char serial_number[42];
    uint8_t serial_number_size = 42;
    error = sen5x_get_serial_number(&serial_number[0], serial_number_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_serial_number");
    printf("Serial number: %s\n", serial_number);
}

TEST (SEN5X_Tests, SEN5X_Test_get_version) {
    int16_t error;
    uint8_t firmware_major;
    uint8_t firmware_minor;
    bool firmware_debug;
    uint8_t hardware_major;
    uint8_t hardware_minor;
    uint8_t protocol_major;
    uint8_t protocol_minor;
    error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
                              &hardware_major, &hardware_minor, &protocol_major,
                              &protocol_minor);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_get_version");
    printf("Firmware major: %u\n", firmware_major);
    printf("Firmware minor: %u\n", firmware_minor);
    printf("Firmware debug: %i\n", firmware_debug);
    printf("Hardware major: %u\n", hardware_major);
    printf("Hardware minor: %u\n", hardware_minor);
    printf("Protocol major: %u\n", protocol_major);
    printf("Protocol minor: %u\n", protocol_minor);
}

TEST (SEN5X_Tests, SEN5X_Test_read_device_status) {
    int16_t error;
    uint32_t device_status;
    error = sen5x_read_device_status(&device_status);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_device_status");
    printf("Device status: %u\n", device_status);
}

TEST (SEN5X_Tests, SEN5X_Test_read_and_clear_device_status) {
    int16_t error;
    uint32_t device_status;
    error = sen5x_read_and_clear_device_status(&device_status);
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_read_and_clear_device_status");
    printf("Device status: %u\n", device_status);
}

TEST (SEN5X_Tests, SEN5X_Test_device_reset) {
    int16_t error;
    error = sen5x_device_reset();
    CHECK_EQUAL_ZERO_TEXT(error, "sen5x_device_reset");
}
